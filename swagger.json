{
  "openapi": "3.0.0",
  "info": {
    "title": "Activity Tracker",
    "description": "The 'activity tracker' project involves creating a web application that automates the management of employee activity tracking.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://${ACTIVITY_TRACKER_IP}:3000/api/v1",
      "description": "Main server"
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns all tasks available in the database",
        "description": "**Users** can view only active tasks while **admins** can view all tasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskName",
            "in": "query",
            "description": "Filter tasks by their task name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter tasks by their `isActive` status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort tasks",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "counters": {
                      "type": "object",
                      "properties": {
                        "documentsActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalDocuments": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "document": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/Task/properties/_id"
                              },
                              "taskName": {
                                "$ref": "#/components/schemas/Task/properties/taskName"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/Task/properties/isActive"
                              },
                              "expectedHours": {
                                "$ref": "#/components/schemas/Task/properties/expectedHours"
                              },
                              "state": {
                                "$ref": "#/components/schemas/Task/properties/state"
                              },
                              "progressState": {
                                "$ref": "#/components/schemas/Task/properties/progressState"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "This route adds a task to the database",
        "description": "Only **admin** can add a task to the database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskName": {
                    "$ref": "#/components/schemas/Task/properties/taskName"
                  },
                  "isActive": {
                    "$ref": "#/components/schemas/Task/properties/isActive"
                  },
                  "expectedHours": {
                    "$ref": "#/components/schemas/Task/properties/expectedHours"
                  },
                  "state": {
                    "$ref": "#/components/schemas/Task/properties/state"
                  },
                  "progressState": {
                    "$ref": "#/components/schemas/Task/properties/progressState"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "task": {
                          "type": "object",
                          "properties": {
                            "taskname": {
                              "$ref": "#/components/schemas/Task/properties/taskName"
                            },
                            "isActive": {
                              "$ref": "#/components/schemas/Task/properties/isActive"
                            },
                            "state": {
                              "$ref": "#/components/schemas/Task/properties/state"
                            },
                            "progressState": {
                              "$ref": "#/components/schemas/Task/properties/progressState"
                            },
                            "_id": {
                              "$ref": "#/components/schemas/Task/properties/_id"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "Task name already exists",
                        "Task validation failed: taskName: Please enter the task name",
                        "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                        "Task validation failed: progressState: Progress state must be above or equal to 0",
                        "Task validation failed: progressState: Progress state must be below or equal to 100",
                        "Task validation failed: progressState: Please enter a number for the progress status",
                        "Invalid input data. Expected hours must be above or equal to 1",
                        "Invalid input data. Please enter a number for the expected hours"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns a task specifying its id",
        "description": "Both **users** and **admins** can view a single task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "document": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "$ref": "#/components/schemas/Task/properties/_id"
                            },
                            "taskName": {
                              "$ref": "#/components/schemas/Task/properties/taskName"
                            },
                            "isActive": {
                              "$ref": "#/components/schemas/Task/properties/isActive"
                            },
                            "state": {
                              "$ref": "#/components/schemas/Task/properties/state"
                            },
                            "progressState": {
                              "$ref": "#/components/schemas/Task/properties/progressState"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Edit the data of a task by specifying its id",
        "description": "Only the **admin** can edit a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskName": {
                    "$ref": "#/components/schemas/Task/properties/taskName"
                  },
                  "isActive": {
                    "$ref": "#/components/schemas/Task/properties/isActive"
                  },
                  "state": {
                    "$ref": "#/components/schemas/Task/properties/state"
                  },
                  "progressState": {
                    "$ref": "#/components/schemas/Task/properties/progressState"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "document": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "$ref": "#/components/schemas/Task/properties/_id"
                            },
                            "taskName": {
                              "$ref": "#/components/schemas/Task/properties/taskName"
                            },
                            "isActive": {
                              "$ref": "#/components/schemas/Task/properties/isActive"
                            },
                            "state": {
                              "$ref": "#/components/schemas/Task/properties/state"
                            },
                            "progressState": {
                              "$ref": "#/components/schemas/Task/properties/progressState"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "This field value already exists: \"Frontend\". Please choose a different value!",
                        "Task validation failed: taskName: Please enter the task name",
                        "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                        "Task validation failed: progressState: Progress state must be above or equal to 0",
                        "Task validation failed: progressState: Progress state must be below or equal to 100",
                        "Task validation failed: progressState: Please enter a number for the progress status"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task by specifying its id",
        "description": "Only the **admin** can delete a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "204": {
            "description": "Request executed successfully"
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "description": "This endpoint allows a **new user** to create an account by providing their personal information and credentials. The server will validate the input, create a new user record, and return the details of the newly created user.",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                },
                "required": ["firstName", "lastName", "email", "codiceFiscale"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "$ref": "#/components/schemas/User/properties/role"
                        },
                        "_id": {
                          "$ref": "#/components/schemas/User/properties/_id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "This field value already exists: \"mario.rossi@top-network.it\". Please choose a different value!",
                        "Invalid input data. Please provide a valid email",
                        "Invalid input data. Path `codiceFiscale` (`RSSMRA85M01H501`) is shorter than the minimum allowed length (16).",
                        "Invalid input data. Path `codiceFiscale` (`RSSMRA85M01H501AA`) is longer than the maximum allowed length (16).",
                        "Invalid input data. RSSMRA85MAAHAAAA is not a valid codiceFiscale (tax code)!",
                        "Invalid input data. You must put a firstName",
                        "Invalid input data. You must put a lastName",
                        "Invalid input data. You must put an email"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "User login and authentication",
        "description": "This endpoint allows **users** to log in to the application by providing their credentials. It authenticates the user and returns a **token** that can be used for accessing protected resources.",
        "security": [],
        "tags": ["Users"],
        "requestBody": {
          "description": "User credentials for login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Please provide email and password"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Incorrect email or password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "summary": "Log out the current user",
        "description": "This endpoint logs out the current **user** by clearing the authentication cookie.",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "tags": ["Users"],
        "summary": "Request a password reset token",
        "description": "Returns the **user** a **token** to change the forgotten password. The **uri** is used to build the link to be sent via email.",
        "security": [],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "description": "The URI to build the link to send via email.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token sent to mail successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Token sent to mail successfully"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "User is not active or accepted, please contact administration for support."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No user found with email address"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/resetPassword/{token}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Reset user password",
        "description": "Allows a **user** to reset their password by providing the **token** obtained from the password reset email. The new password and password confirmation should be included in the request body.",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The token obtained from the password reset email"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NjA3OGVjZWFiMzliZTcyZWFhN2FjYiIsImlhdCI6MTcxOTM5NTg2MCwiZXhwIjoxNzE5Mzk5NDYwfQ.2EGvjvUHS2Q_Af-V3JcJl2nPBURnOji8AkQ12DS36zg"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "example": "user"
                        },
                        "id": {
                          "type": "string",
                          "example": "666078eceab39be72eaa7acb"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "Token is invalid or expired",
                        "Invalid input data. Passwords are not the same!",
                        "Invalid input data. Path `password` (`Pass`) is shorter than the minimum allowed length (8).",
                        "Invalid input data. Password must be at least 8 characters long and must contain: at least one lowercase character, at least one uppercase character, at least one number and at least one symbol"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/updateMyPassword": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update current user's password",
        "description": "Allows an **authenticated user** to update their password. The request body must include the current password, the new password, and the confirmation of the new password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passwordCurrent": {
                    "type": "string",
                    "description": "The current password of the user",
                    "example": "Pass1234!"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["passwordCurrent", "password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NjA3OGVjZWFiMzliZTcyZWFhN2FjYiIsImlhdCI6MTcxOTM5NTg2MCwiZXhwIjoxNzE5Mzk5NDYwfQ.2EGvjvUHS2Q_Af-V3JcJl2nPBURnOji8AkQ12DS36zg"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "$ref": "#/components/schemas/User/properties/role"
                        },
                        "id": {
                          "$ref": "#/components/schemas/User/properties/_id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid input data. Passwords are not the same!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "You are not logged in, log in to get access",
                        "The token is invalid. Please log in once more!"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/changeStatus/{id}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Change user status",
        "description": "This route, accessible only to **admins**, allows changing the `isActive` and `isAccepted` status of a user to true or false. The **uri** parameter is used to construct the link to be sent via email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the user to retrieve."
          },
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "description": "The URI to build the link to send via email.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isActive": {
                    "$ref": "#/components/schemas/User/properties/isActive"
                  },
                  "isAccepted": {
                    "$ref": "#/components/schemas/User/properties/isAccepted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "$ref": "#/components/schemas/User/properties/_id"
                            },
                            "firstName": {
                              "$ref": "#/components/schemas/User/properties/firstName"
                            },
                            "lastName": {
                              "$ref": "#/components/schemas/User/properties/lastName"
                            },
                            "email": {
                              "$ref": "#/components/schemas/User/properties/email"
                            },
                            "role": {
                              "$ref": "#/components/schemas/User/properties/role"
                            },
                            "propic": {
                              "$ref": "#/components/schemas/User/properties/propic"
                            },
                            "codiceFiscale": {
                              "$ref": "#/components/schemas/User/properties/codiceFiscale"
                            },
                            "isAccepted": {
                              "$ref": "#/components/schemas/User/properties/isAccepted"
                            },
                            "isActive": {
                              "$ref": "#/components/schemas/User/properties/isActive"
                            },
                            "creationDate": {
                              "$ref": "#/components/schemas/User/properties/creationDate"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": ["Invalid isActive: ..", "Invalid isAccepted: ciao."]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/getMe": {
      "get": {
        "tags": ["Users"],
        "summary": "Get personal data",
        "description": "This route allows **users** to view all their personal data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "$ref": "#/components/schemas/User/properties/firstName"
                    },
                    "lastName": {
                      "$ref": "#/components/schemas/User/properties/lastName"
                    },
                    "propic": {
                      "$ref": "#/components/schemas/User/properties/propic"
                    },
                    "codiceFiscale": {
                      "$ref": "#/components/schemas/User/properties/codiceFiscale"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/updateMe": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update personal data",
        "description": "This route allows the **logged-in user** to update their personal data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "propic": {
                    "type": "string",
                    "format": "binary",
                    "description": "User's profile picture"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Data updated successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "updatedUser": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "$ref": "#/components/schemas/User/properties/_id"
                            },
                            "firstName": {
                              "$ref": "#/components/schemas/User/properties/firstName"
                            },
                            "lastName": {
                              "$ref": "#/components/schemas/User/properties/lastName"
                            },
                            "email": {
                              "$ref": "#/components/schemas/User/properties/email"
                            },
                            "role": {
                              "$ref": "#/components/schemas/User/properties/role"
                            },
                            "propic": {
                              "$ref": "#/components/schemas/User/properties/propic"
                            },
                            "codiceFiscale": {
                              "$ref": "#/components/schemas/User/properties/codiceFiscale"
                            },
                            "isAccepted": {
                              "$ref": "#/components/schemas/User/properties/isAccepted"
                            },
                            "isactive": {
                              "$ref": "#/components/schemas/User/properties/isActive"
                            },
                            "creationDate": {
                              "$ref": "#/components/schemas/User/properties/creationDate"
                            },
                            "passwordChangedAt": {
                              "$ref": "#/components/schemas/User/properties/passwordChangedAt"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "Invalid input data. You must put a firstName",
                        "Invalid input data. You must put a lastName",
                        "Invalid input data. You must put a codiceFiscale (taxCode)",
                        "This field value already exists: \"RSSMRA85M01H501Z\". Please choose a different value!"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Returns all users available in the database. By default this endpoint is intended for use by **administrators**.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "Filter users by their first name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Filter users by their last name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_id",
            "in": "query",
            "description": "Filter users by their id. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter users by their role. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isAccepted",
            "in": "query",
            "description": "Filter users by `isAccepted` status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Filter users by their `isActive` status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort users",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of users",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "View the selected page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "counters": {
                      "type": "object",
                      "properties": {
                        "documentsActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalDocuments": {
                          "type": "integer",
                          "example": 1
                        },
                        "userAccepted": {
                          "type": "integer",
                          "example": 1
                        },
                        "userNotAccepted": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    },
                    "results": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "document": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/User/properties/_id"
                              },
                              "firstName": {
                                "$ref": "#/components/schemas/User/properties/firstName"
                              },
                              "lastName": {
                                "$ref": "#/components/schemas/User/properties/lastName"
                              },
                              "email": {
                                "$ref": "#/components/schemas/User/properties/email"
                              },
                              "role": {
                                "$ref": "#/components/schemas/User/properties/role"
                              },
                              "propic": {
                                "$ref": "#/components/schemas/User/properties/propic"
                              },
                              "codiceFiscale": {
                                "$ref": "#/components/schemas/User/properties/codiceFiscale"
                              },
                              "isAccepted": {
                                "$ref": "#/components/schemas/User/properties/isAccepted"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/User/properties/isActive"
                              },
                              "creationDate": {
                                "$ref": "#/components/schemas/User/properties/creationDate"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "This endpoint retrieves a user by their ID. It returns the user's first name, last name, profile picture, and codice fiscale. This route is restricted to **admins** and to the owner of the retrieved ID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "string",
              "example": "66793f77d94a25d7b24f1186"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "$ref": "#/components/schemas/User/properties/firstName"
                        },
                        "lastName": {
                          "$ref": "#/components/schemas/User/properties/lastName"
                        },
                        "propic": {
                          "$ref": "#/components/schemas/User/properties/propic"
                        },
                        "codiceFiscale": {
                          "$ref": "#/components/schemas/User/properties/codiceFiscale"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid _id: 664b56f8743d9c1f8dd2."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No document found with that ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by ID",
        "description": "This endpoint allows an **admin** to update a user's information by their ID. It updates the user document with the provided fields and returns the updated information.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string",
              "example": "6644c5ad58e728aeecdb8852"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update for the user",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "propic": {
                    "$ref": "#/components/schemas/User/properties/propic"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "$ref": "#/components/schemas/User/properties/firstName"
                        },
                        "lastName": {
                          "$ref": "#/components/schemas/User/properties/lastName"
                        },
                        "propic": {
                          "$ref": "#/components/schemas/User/properties/propic"
                        },
                        "codiceFiscale": {
                          "$ref": "#/components/schemas/User/properties/codiceFiscale"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "This endpoint allows an **admin** or the **user** themselves to delete a user by their ID. It deactivates the user instead of permanently deleting the record.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string",
              "example": "6679678d98a282cb36cec53d"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden: Cannot delete an admin."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/activities": {
      "get": {
        "summary": "Get user activities by userID",
        "description": "This endpoint allows an **admin** to retrieve all activities of a user by their userID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "description": "ID of the user whose activities are to be retrieved",
            "schema": {
              "type": "string",
              "example": "6644c5ad58e728aeecdb8852"
            }
          },
          {
            "name": "taskName",
            "in": "query",
            "description": "Filter the activity by the task name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime[gte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a start date greater than or equal to the specified one. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "endTime[lte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a finish date less than or equal to the specified date. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Status of the activity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTaskActive",
            "in": "query",
            "description": "Filter activities by their isTaskActive status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sort activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of results per page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "counters": {
                      "type": "object",
                      "properties": {
                        "documentsActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalDocuments": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTaskActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTaskInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalResultQueriesActive": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              },
                              "taskName": {
                                "$ref": "#/components/schemas/Activity/properties/taskName"
                              },
                              "taskID": {
                                "$ref": "#/components/schemas/Activity/properties/taskID"
                              },
                              "startTime": {
                                "$ref": "#/components/schemas/Activity/properties/startTime"
                              },
                              "endTime": {
                                "$ref": "#/components/schemas/Activity/properties/endTime"
                              },
                              "notes": {
                                "$ref": "#/components/schemas/Activity/properties/notes"
                              },
                              "userID": {
                                "$ref": "#/components/schemas/Activity/properties/userID"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/Activity/properties/isActive"
                              },
                              "isTaskActive": {
                                "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                              },
                              "hours": {
                                "type": "number",
                                "multipleOf": 0.1,
                                "example": 0.2
                              },
                              "id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "get": {
        "summary": "Retrieve all activities",
        "description": "Returns all available activities in the database. This endpoint is accessible only by the **admin**.",
        "tags": ["Activities"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "query",
            "description": "Filter the activity by the task id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskName",
            "in": "query",
            "description": "Filter the activity by the task name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime[gte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a start date greater than or equal to the specified one. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "endTime[lte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a finish date less than or equal to the specified date. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Status of the activity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTaskActive",
            "in": "query",
            "description": "Filter activities by their isTaskActive status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of activities",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "View the selected page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "counters": {
                      "type": "object",
                      "properties": {
                        "documentsActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalDocuments": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTaskActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTaskInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalResultQueriesActive": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              },
                              "taskName": {
                                "$ref": "#/components/schemas/Activity/properties/taskName"
                              },
                              "taskID": {
                                "$ref": "#/components/schemas/Activity/properties/taskID"
                              },
                              "startTime": {
                                "$ref": "#/components/schemas/Activity/properties/startTime"
                              },
                              "endTime": {
                                "$ref": "#/components/schemas/Activity/properties/endTime"
                              },
                              "notes": {
                                "$ref": "#/components/schemas/Activity/properties/notes"
                              },
                              "userID": {
                                "$ref": "#/components/schemas/Activity/properties/userID"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/Activity/properties/isActive"
                              },
                              "isTaskActive": {
                                "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                              },
                              "hours": {
                                "type": "number",
                                "multipleOf": 0.1,
                                "example": 0.2
                              },
                              "id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not logged in, log in to get access"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a new activity",
        "description": "This endpoint adds a new activity to the database.\n- **Admins**: Can add an activity on behalf of a specific user by including the `userID` in the request body.\n- **Users**: The `userID` is dynamically obtained from the logged-in user's credentials.",
        "tags": ["Activities"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskName": {
                    "$ref": "#/components/schemas/Activity/properties/taskName"
                  },
                  "taskID": {
                    "$ref": "#/components/schemas/Activity/properties/taskID"
                  },
                  "startTime": {
                    "$ref": "#/components/schemas/Activity/properties/startTime"
                  },
                  "endTime": {
                    "$ref": "#/components/schemas/Activity/properties/endTime"
                  },
                  "notes": {
                    "$ref": "#/components/schemas/Activity/properties/notes"
                  },
                  "userID": {
                    "$ref": "#/components/schemas/Activity/properties/userID"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Activity successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activity": {
                          "type": "object",
                          "properties": {
                            "taskName": {
                              "$ref": "#/components/schemas/Activity/properties/taskName"
                            },
                            "taskID": {
                              "$ref": "#/components/schemas/Activity/properties/taskID"
                            },
                            "startTime": {
                              "$ref": "#/components/schemas/Activity/properties/startTime"
                            },
                            "endTime": {
                              "$ref": "#/components/schemas/Activity/properties/endTime"
                            },
                            "notes": {
                              "$ref": "#/components/schemas/Activity/properties/notes"
                            },
                            "userID": {
                              "$ref": "#/components/schemas/Activity/properties/userID"
                            },
                            "isActive": {
                              "$ref": "#/components/schemas/Activity/properties/isActive"
                            },
                            "_id": {
                              "$ref": "#/components/schemas/Activity/properties/_id"
                            },
                            "isTaskActive": {
                              "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                            },
                            "hours": {
                              "type": "number",
                              "multipleOf": 0.1,
                              "example": 0.2
                            },
                            "id": {
                              "$ref": "#/components/schemas/Activity/properties/_id"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "An activity must have a task name",
                        "An activity must have a start time",
                        "An activity must have an end time",
                        "An activity must have some notes",
                        "Notes must have less or equal than 100 characters"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "Forbidden: the activity must be in the current year",
                        "Forbidden: activity date month must be the current month",
                        "Forbidden: activity date cannot be in the future",
                        "The time you entered intersects with the time of another activity you have already created."
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities/me": {
      "get": {
        "summary": "Retrieve logged-in user's activities",
        "description": "Returns all activities for the **logged-in user**. A virtual field calculates the time difference between `startTime` and `endTime` for each activity.",
        "tags": ["Activities"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "taskName",
            "in": "query",
            "description": "Filter the activity by the task name. The search is case-sensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime[gte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a start date greater than or equal to the specified one. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "endTime[lte]",
            "in": "query",
            "format": "date-time",
            "description": "Finds all activities with a finish date less than or equal to the specified date. Date format: `YYYY`-`MM`-`DD`",
            "schema": {
              "type": "date"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Status of the activity",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isTaskActive",
            "in": "query",
            "description": "Filter activities by their isActive status.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort activities",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of activities",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "View the selected page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "counter": {
                      "type": "object",
                      "properties": {
                        "documentsActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalDocuments": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTaskActive": {
                          "type": "integer",
                          "example": 1
                        },
                        "documentsTasksInactive": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalResultQueriesActive": {
                          "type": "integer",
                          "example": 1
                        }
                      }
                    },
                    "results": {
                      "type": "integer",
                      "example": 1
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userActivities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              },
                              "taskName": {
                                "$ref": "#/components/schemas/Activity/properties/taskName"
                              },
                              "taskID": {
                                "$ref": "#/components/schemas/Activity/properties/taskID"
                              },
                              "startTime": {
                                "$ref": "#/components/schemas/Activity/properties/startTime"
                              },
                              "endTime": {
                                "$ref": "#/components/schemas/Activity/properties/endTime"
                              },
                              "notes": {
                                "$ref": "#/components/schemas/Activity/properties/notes"
                              },
                              "userID": {
                                "$ref": "#/components/schemas/Activity/properties/userID"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/Activity/properties/isActive"
                              },
                              "isTaskActive": {
                                "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                              },
                              "hours": {
                                "type": "number",
                                "multipleOf": 0.1,
                                "example": 0.2
                              },
                              "id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error: Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "You are not logged in, log in to get access",
                        "The token is invalid. Please log in once more!"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erros: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities/{id}": {
      "get": {
        "summary": "Get activity by ID",
        "description": "This endpoint retrieves an activity by its ID.",
        "tags": ["Activities"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the activity to retrieve",
            "schema": {
              "type": "string",
              "example": "667a841878c50bf2ce9a3e6b"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "$ref": "#/components/schemas/Activity/properties/_id"
                        },
                        "taskName": {
                          "$ref": "#/components/schemas/Activity/properties/taskName"
                        },
                        "taskID": {
                          "$ref": "#/components/schemas/Activity/properties/taskID"
                        },
                        "startTime": {
                          "$ref": "#/components/schemas/Activity/properties/startTime"
                        },
                        "endTime": {
                          "$ref": "#/components/schemas/Activity/properties/endTime"
                        },
                        "notes": {
                          "$ref": "#/components/schemas/Activity/properties/notes"
                        },
                        "userID": {
                          "$ref": "#/components/schemas/Activity/properties/userID"
                        },
                        "isActive": {
                          "$ref": "#/components/schemas/Activity/properties/isActive"
                        },
                        "isTaskActive": {
                          "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                        },
                        "hours": {
                          "type": "integer",
                          "example": 2
                        },
                        "id": {
                          "$ref": "#/components/schemas/Activity/properties/_id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error: Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid _id: 664b56f8743d9c1f8dd2."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No document found with that ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update activity by ID",
        "description": "This endpoint allows an **admin** or the **activity's owner** to update an activity's information by its ID. It updates the user document with the provided fields and returns the updated information.",
        "tags": ["Activities"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the activity to update",
            "schema": {
              "type": "string",
              "example": "667a841878c50bf2ce9a3e6b"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update for the activity",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskName": {
                    "$ref": "#/components/schemas/Activity/properties/taskName"
                  },
                  "taskID": {
                    "$ref": "#/components/schemas/Activity/properties/taskID"
                  },
                  "startTime": {
                    "$ref": "#/components/schemas/Activity/properties/startTime"
                  },
                  "endTime": {
                    "$ref": "#/components/schemas/Activity/properties/endTime"
                  },
                  "notes": {
                    "$ref": "#/components/schemas/Activity/properties/notes"
                  },
                  "userID": {
                    "$ref": "#/components/schemas/Activity/properties/userID"
                  },
                  "isActive": {
                    "$ref": "#/components/schemas/Activity/properties/isActive"
                  },
                  "isTaskActive": {
                    "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Activity updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "$ref": "#/components/schemas/Activity/properties/_id"
                        },
                        "taskName": {
                          "$ref": "#/components/schemas/Activity/properties/taskName"
                        },
                        "taskID": {
                          "$ref": "#/components/schemas/Activity/properties/taskID"
                        },
                        "startTime": {
                          "$ref": "#/components/schemas/Activity/properties/startTime"
                        },
                        "endTime": {
                          "$ref": "#/components/schemas/Activity/properties/endTime"
                        },
                        "notes": {
                          "$ref": "#/components/schemas/Activity/properties/notes"
                        },
                        "userID": {
                          "$ref": "#/components/schemas/Activity/properties/userID"
                        },
                        "isActive": {
                          "$ref": "#/components/schemas/Activity/properties/isActive"
                        },
                        "isTaskActive": {
                          "$ref": "#/components/schemas/Activity/properties/isTaskActive"
                        },
                        "hours": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "array",
                      "example": [
                        "Unauthorized: you do not have the permission to perform this action",
                        "Cannot make changes of an activity with the startDate of a different month."
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete activity by ID",
        "description": "This endpoint allows an **admin** or the **activity's owner** to delete an activity by its ID. It deactivates the activity instead of permanently deleting the record.",
        "tags": ["Activities"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the activity to delete",
            "schema": {
              "type": "string",
              "example": "667a841878c50bf2ce9a3e6b"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Activity deleted successfully"
          },
          "403": {
            "description": "Error: Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error: Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error: Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6644c8c158e728aeecdb8859"
          },
          "taskName": {
            "type": "string",
            "example": "Frontend"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "state": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "example": "In progress"
          },
          "progressState": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "expectedHours": {
            "type": "number",
            "minimum": 1
          }
        },
        "required": ["taskName", "progressState", "expectedHours"]
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "66793f77d94a25d7b24f1186"
          },
          "firstName": {
            "type": "string",
            "example": "Mario"
          },
          "lastName": {
            "type": "string",
            "example": "Rossi"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "mario.rossi@top-network.it",
            "unique": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password1234.",
            "minLength": 8
          },
          "passwordConfirm": {
            "type": "string",
            "example": "Password1234."
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          },
          "passwordResetToken": {
            "type": "string",
            "example": "someRandomToken123"
          },
          "passwordResetExpires": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-31T23:59:59.999Z"
          },
          "passwordChangedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "propic": {
            "type": "string",
            "format": "binary",
            "default": "default.png"
          },
          "codiceFiscale": {
            "type": "string",
            "minlength": 16,
            "maxlength": 16,
            "example": "RSSMRA85M01H501Z",
            "unique": true
          },
          "isAccepted": {
            "type": "boolean",
            "default": false
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["firstName", "lastName", "email", "codiceFiscale"]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "667159e266e0e8ce0f9b82ae"
          },
          "taskName": {
            "type": "string",
            "trim": true
          },
          "taskID": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "maxLength": 100,
            "trim": true
          },
          "userID": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isTaskActive": {
            "type": "boolean"
          }
        },
        "required": ["taskName", "taskID", "startTime", "endTime", "notes", "userID"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
