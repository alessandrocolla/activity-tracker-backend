{
  "openapi": "3.0.0",
  "info": {
    "title": "Activity Tracker",
    "description": "The 'activity tracker' project involves creating a web application that automates the management of employee activity tracking.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000/api/v1",
      "description": "Main server"
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns all tasks available in the database",
        "description": "Users can view only active tasks while admins can view all tasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "This route adds a task to the database",
        "description": "Only admin can add a task to the database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "Task name already exists",
                      "Task validation failed: taskName: Please enter the task name",
                      "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                      "Task validation failed: progressState: Progress state must be above or equal to 0",
                      "Task validation failed: progressState: Progress state must be below or equal to 100",
                      "Task validation failed: progressState: Please enter a number for the progress status"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns a task specifying its id",
        "description": "Both users and admins can view a single task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Edit the data of a task by specifying its id",
        "description": "Only the admin can edit a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "This field value already exists: \"Frontend\". Please choose a different value!",
                      "Task validation failed: taskName: Please enter the task name",
                      "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                      "Task validation failed: progressState: Progress state must be above or equal to 0",
                      "Task validation failed: progressState: Progress state must be below or equal to 100",
                      "Task validation failed: progressState: Please enter a number for the progress status"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task by specifying its id",
        "description": "Only the admin can delete a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "204": {
            "description": "Request executed successfully"
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "tags": ["Users"],
        "summary": "Request a password reset token",
        "description": "Returns the user a token to change the forgotten password. The uri is used to build the link to be sent via email.",
        "security": [],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The URI to build the link to send via email."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token sent to mail successfully"
          },
          "403": {
            "description": "User is not active or accepted, please contact administration for support"
          },
          "404": {
            "description": "No user found with email address"
          }
        }
      }
    },
    "/users/resetPassword/{token}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Reset user password",
        "description": "Allows a user to reset their password by providing the token obtained from the password reset email. The new password and password confirmation should be included in the request body.",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The token obtained from the password reset email"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully"
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "Token is invalid or expired",
                      "Invalid input data. Passwords are not the same!",
                      "Invalid input data. Path `password` (`Pass`) is shorter than the minimum allowed length (8).",
                      "Invalid input data. Password must be at least 8 characters long and must contain: at least one lowercase character, at least one uppercase character, at least one number and at least one symbol"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user found with email address"
          }
        }
      }
    },
    "/users/updateMyPassword": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update current user's password",
        "description": "Allows an authenticated user to update their password. The request body must include the current password, the new password, and the confirmation of the new password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passwordCurrent": {
                    "type": "string",
                    "description": "The current password of the user",
                    "example": "Pass1234!"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["passwordCurrent", "password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully"
          },
          "400": {
            "description": "Invalid input data. Passwords are not the same!"
          },
          "401": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": ["You are not logged in, log in to get access", "Your current password is wrong"]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "example": "Frontend"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "state": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "example": "In progress"
          },
          "progressState": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": ["taskName", "progressState"]
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Mario"
          },
          "lastName": {
            "type": "string",
            "example": "Rossi"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "mario.rossi@top-network.it",
            "unique": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password1234.",
            "minLength": 8
          },
          "passwordConfirm": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          },
          "passwordResetToken": {
            "type": "string",
            "example": "someRandomToken123"
          },
          "passwordResetExpires": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-31T23:59:59.999Z"
          },
          "passwordChangedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "propic": {
            "type": "string",
            "default": "default.png"
          },
          "codiceFiscale": {
            "type": "string",
            "minlength": 16,
            "maxlength": 16,
            "example": "RSSMRA85M01H501Z",
            "unique": true
          },
          "isAccepted": {
            "type": "boolean",
            "default": false
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["firstName", "lastName", "email", "codiceFiscale"]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "trim": true
          },
          "taskID": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "maxLength": 100,
            "trim": true
          },
          "userID": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": ["taskName", "taskID", "startTime", "endTime", "notes", "userID"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
