{
  "openapi": "3.0.0",
  "info": {
    "title": "Activity Tracker",
    "description": "The 'activity tracker' project involves creating a web application that automates the management of employee activity tracking.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000/api/v1",
      "description": "Main server"
    }
  ],
  "paths": {
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns all tasks available in the database",
        "description": "Users can view only active tasks while admins can view all tasks",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "This route adds a task to the database",
        "description": "Only admin can add a task to the database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Resource created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "Task name already exists",
                      "Task validation failed: taskName: Please enter the task name",
                      "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                      "Task validation failed: progressState: Progress state must be above or equal to 0",
                      "Task validation failed: progressState: Progress state must be below or equal to 100",
                      "Task validation failed: progressState: Please enter a number for the progress status"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Returns a task specifying its id",
        "description": "Both users and admins can view a single task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      },
      "patch": {
        "tags": ["Tasks"],
        "summary": "Edit the data of a task by specifying its id",
        "description": "Only the admin can edit a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "This field value already exists: \"Frontend\". Please choose a different value!",
                      "Task validation failed: taskName: Please enter the task name",
                      "Task validation failed: state: State is either: 'To do', 'In progress', 'Done'",
                      "Task validation failed: progressState: Progress state must be above or equal to 0",
                      "Task validation failed: progressState: Progress state must be below or equal to 100",
                      "Task validation failed: progressState: Please enter a number for the progress status"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete a task by specifying its id",
        "description": "Only the admin can delete a task",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6644c8c158e728aeecdb8859"
            },
            "description": "The id of the task to retrieve"
          }
        ],
        "responses": {
          "204": {
            "description": "Request executed successfully"
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/Users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "Register a new user",
        "description": "This endpoint allows a new user to create an account by providing their personal information and credentials. The server will validate the input, create a new user record, and return the details of the newly created user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                },
                "required": ["firstName", "lastName", "email", "codiceFiscale"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "$ref": "#/components/schemas/User/properties/role"
                        },
                        "_id": {
                          "$ref": "#/components/schemas/User/properties/_id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "This field value already exists: \"mario.rossi@top-network.it\". Please choose a different value!",
                      "Invalid input data. Please provide a valid email",
                      "Invalid input data. Path `codiceFiscale` (`RSSMRA85M01H501`) is shorter than the minimum allowed length (16).",
                      "Invalid input data. Path `codiceFiscale` (`RSSMRA85M01H501AA`) is longer than the maximum allowed length (16).",
                      "Invalid input data. RSSMRA85MAAHAAAA is not a valid codiceFiscale (tax code)!",
                      "Invalid input data. You must put a firstName",
                      "Invalid input data. You must put a lastName",
                      "Invalid input data. You must put an email"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Users/login": {
      "post": {
        "summary": "User login and authentication",
        "description": "This endpoint allows users to log in to the application by providing their credentials. It authenticates the user and returns a token that can be used for accessing protected resources.",
        "tags": ["Users"],
        "requestBody": {
          "description": "User credentials for login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "format": "string",
                    "example": "success"
                  },
                  "token": {
                    "format": "token",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2NGI1NmY4NzQzZGIxNDg5YzFmOGRkMiIsImlhdCI6MTcxOTIzMzUxMywiZXhwIjoxNzE5MjM3MTEzfQ.Hf9pfOKNfFe9arYMxUfYrvTiIEKkfewXmK98PcQHO9I"
                  },
                  "data": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "$ref": "#/components/schemas/User/properties/role"
                      },
                      "_id": {
                        "$ref": "#/components/schemas/User/properties/_id"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Please provide email and password"
          },
          "401": {
            "description": "Invalid email or password"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "summary": "Log out the current user",
        "description": "This endpoint logs out the current user by clearing the authentication cookie.",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "tags": ["Users"],
        "summary": "Request a password reset token",
        "description": "Returns the user a token to change the forgotten password. The uri is used to build the link to be sent via email.",
        "security": [],
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The URI to build the link to send via email."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "$ref": "#/components/schemas/User/properties/email"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token sent to mail successfully"
          },
          "403": {
            "description": "User is not active or accepted, please contact administration for support"
          },
          "404": {
            "description": "No user found with email address"
          }
        }
      }
    },
    "/users/resetPassword/{token}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Reset user password",
        "description": "Allows a user to reset their password by providing the token obtained from the password reset email. The new password and password confirmation should be included in the request body.",
        "security": [],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The token obtained from the password reset email"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully"
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "Token is invalid or expired",
                      "Invalid input data. Passwords are not the same!",
                      "Invalid input data. Path `password` (`Pass`) is shorter than the minimum allowed length (8).",
                      "Invalid input data. Password must be at least 8 characters long and must contain: at least one lowercase character, at least one uppercase character, at least one number and at least one symbol"
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user found with email address"
          }
        }
      }
    },
    "/users/updateMyPassword": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update current user's password",
        "description": "Allows an authenticated user to update their password. The request body must include the current password, the new password, and the confirmation of the new password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passwordCurrent": {
                    "type": "string",
                    "description": "The current password of the user",
                    "example": "Pass1234!"
                  },
                  "password": {
                    "$ref": "#/components/schemas/User/properties/password"
                  },
                  "passwordConfirm": {
                    "$ref": "#/components/schemas/User/properties/passwordConfirm"
                  }
                },
                "required": ["passwordCurrent", "password", "passwordConfirm"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully"
          },
          "400": {
            "description": "Invalid input data. Passwords are not the same!"
          },
          "401": {
            "description": "Error occurred while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": ["You are not logged in, log in to get access", "Your current password is wrong"]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/changeStatus/{id}": {
      "patch": {
        "tags": ["Users"],
        "summary": "Change user status",
        "description": "This route, accessible only to admins, allows changing the isActive and isAccepted status of a user to true or false. The uri parameter is used to construct the link to be sent via email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the user to retrieve."
          },
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The URI to build the link to send via email."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isActive": {
                    "$ref": "#/components/schemas/User/properties/isActive"
                  },
                  "isAccepted": {
                    "$ref": "#/components/schemas/User/properties/isAccepted"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token sent to mail successfully."
          },
          "400": {
            "description": "Invalid isActive: ."
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/users/getMe": {
      "get": {
        "tags": ["Users"],
        "summary": "Get personal data",
        "description": "This route allows users to view all their personal data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstName": {
                      "$ref": "#/components/schemas/User/properties/firstName"
                    },
                    "lastName": {
                      "$ref": "#/components/schemas/User/properties/lastName"
                    },
                    "propic": {
                      "$ref": "#/components/schemas/User/properties/propic"
                    },
                    "codiceFiscale": {
                      "$ref": "#/components/schemas/User/properties/codiceFiscale"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      }
    },
    "/users/updateMe": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update personal data",
        "description": "This route allows the logged-in user to update their personal data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "propic": {
                    "type": "string",
                    "format": "binary",
                    "description": "User's profile picture"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request executed successfully"
          },
          "400": {
            "description": "Error occurred while processing the request",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "errors": [
                      "Invalid input data. You must put a firstName",
                      "Invalid input data. You must put a lastName",
                      "Invalid input data. You must put a codiceFiscale (taxCode)"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Returns all users available in the database. By default. This endpoint is intended for use by administrators.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "type": "string",
            "description": "Filter users by their first name. The search is case-sensitive."
          },
          {
            "name": "lastName",
            "in": "query",
            "type": "string",
            "description": "Filter users by their last name. The search is case-sensitive."
          },
          {
            "name": "_id",
            "in": "query",
            "type": "string",
            "description": "Filter users by their id. The search is case-sensitive."
          },
          {
            "name": "role",
            "in": "query",
            "type": "string",
            "description": "Filter users by their role. The search is case-sensitive."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string",
            "description": "Sort users"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "string",
            "description": "Limits the number of users"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string",
            "description": "View the selected page"
          }
        ],
        "responses": {
          "200": {
            "description": "Request executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "$ref": "#/components/schemas/User/properties/_id"
                    },
                    "firstName": {
                      "$ref": "#/components/schemas/User/properties/firstName"
                    },
                    "lastName": {
                      "$ref": "#/components/schemas/User/properties/lastName"
                    },
                    "email": {
                      "$ref": "#/components/schemas/User/properties/email"
                    },
                    "propic": {
                      "$ref": "#/components/schemas/User/properties/propic"
                    },
                    "codiceFiscale": {
                      "$ref": "#/components/schemas/User/properties/codiceFiscale"
                    },
                    "isAccepted": {
                      "$ref": "#/components/schemas/User/properties/isAccepted"
                    },
                    "isActive": {
                      "$ref": "#/components/schemas/User/properties/isActive"
                    },
                    "creationDate": {
                      "$ref": "#/components/schemas/User/properties/creationDate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not logged in, log in to get access"
          },
          "403": {
            "description": "Unauthorized: you do not have the permission to perform this action"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "This endpoint retrieves a user by their ID. It returns the user's first name, last name, profile picture, and codice fiscale. This route is restricted to admins and to the owner of the retrieved ID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "string",
              "example": "66793f77d94a25d7b24f1186"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "$ref": "#/components/schemas/User/properties/firstName"
                        },
                        "lastName": {
                          "$ref": "#/components/schemas/User/properties/lastName"
                        },
                        "propic": {
                          "$ref": "#/components/schemas/User/properties/propic"
                        },
                        "codiceFiscale": {
                          "$ref": "#/components/schemas/User/properties/codiceFiscale"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid _id: 664b56f8743d9c1f8dd2."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "No document found with that ID"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by ID",
        "description": "This endpoint allows an admin to update a user's information by their ID. It updates the user document with the provided fields and returns the updated information.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string",
              "example": "6644c5ad58e728aeecdb8852"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update for the user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "$ref": "#/components/schemas/User/properties/firstName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/User/properties/lastName"
                  },
                  "propic": {
                    "$ref": "#/components/schemas/User/properties/propic"
                  },
                  "codiceFiscale": {
                    "$ref": "#/components/schemas/User/properties/codiceFiscale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "$ref": "#/components/schemas/User/properties/firstName"
                        },
                        "lastName": {
                          "$ref": "#/components/schemas/User/properties/lastName"
                        },
                        "propic": {
                          "$ref": "#/components/schemas/User/properties/propic"
                        },
                        "codiceFiscale": {
                          "$ref": "#/components/schemas/User/properties/codiceFiscale"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "This endpoint allows an admin or the user themselves to delete a user by their ID. It deactivates the user instead of permanently deleting the record.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string",
              "example": "6679678d98a282cb36cec53d"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully",
            "content": {}
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Document not found."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: Cannot delete an admin",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden: Cannot delete an admin."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/activities": {
      "get": {
        "summary": "Get user activities by userID",
        "description": "This endpoint allows an admin to retrieve all activities of a user by their userID.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "description": "ID of the user whose activities are to be retrieved",
            "schema": {
              "type": "string",
              "example": "6644c5ad58e728aeecdb8852"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of results per page",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "example": "-createdAt"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "description": "Fields to include in the response",
            "schema": {
              "type": "string",
              "example": "name,description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activities retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "totalDocuments": {
                      "type": "integer",
                      "example": 2
                    },
                    "results": {
                      "type": "integer",
                      "example": 2
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "$ref": "#/components/schemas/Activity/properties/_id"
                              },
                              "taskName": {
                                "$ref": "#/components/schemas/Activity/properties/taskName"
                              },
                              "taskID": {
                                "$ref": "#/components/schemas/Activity/properties/taskID"
                              },
                              "startTime": {
                                "$ref": "#/components/schemas/Activity/properties/startTime"
                              },
                              "endTime": {
                                "$ref": "#/components/schemas/Activity/properties/endTime"
                              },
                              "notes": {
                                "$ref": "#/components/schemas/Activity/properties/notes"
                              },
                              "userID": {
                                "$ref": "#/components/schemas/Activity/properties/userID"
                              },
                              "isActive": {
                                "$ref": "#/components/schemas/Activity/properties/isActive"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized: you do not have the permission to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "example": "Frontend"
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "state": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "example": "In progress"
          },
          "progressState": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": ["taskName", "progressState"]
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "66793f77d94a25d7b24f1186"
          },
          "firstName": {
            "type": "string",
            "example": "Mario"
          },
          "lastName": {
            "type": "string",
            "example": "Rossi"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "mario.rossi@top-network.it",
            "unique": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password1234.",
            "minLength": 8
          },
          "passwordConfirm": {
            "type": "string",
            "example": "Password1234."
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          },
          "passwordResetToken": {
            "type": "string",
            "example": "someRandomToken123"
          },
          "passwordResetExpires": {
            "type": "string",
            "format": "date-time",
            "example": "2023-12-31T23:59:59.999Z"
          },
          "passwordChangedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "propic": {
            "type": "string",
            "format": "binary",
            "default": "default.png"
          },
          "codiceFiscale": {
            "type": "string",
            "minlength": 16,
            "maxlength": 16,
            "example": "RSSMRA85M01H501Z",
            "unique": true
          },
          "isAccepted": {
            "type": "boolean",
            "default": false
          },
          "isActive": {
            "type": "boolean",
            "default": true
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["firstName", "lastName", "email", "codiceFiscale"]
      },
      "Activity": {
        "_id": {
          "type": "string",
          "example": "667159e266e0e8ce0f9b82ae"
        },
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "trim": true
          },
          "taskID": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "maxLength": 100,
            "trim": true
          },
          "userID": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": ["taskName", "taskID", "startTime", "endTime", "notes", "userID"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
